#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#ifdef _WIN32
#include <winsock2.h>
#pragma comment(lib,"ws2_32.lib")
typedef int socklen_t;
#else
#include <sys/time.h> 
#include <sys/types.h> 
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#endif

#include "magic.h"
int row=16;
int col=30;
char chararr[16][30]={' '};
int g_newsockfd=0;
class Player 
{
public:
    int rowpos;
    int colpos;
    const char * name;
    int namewidth;
    Player(const char * name, int rowpos,int colpos)
    {
        this->name= name;
        this->namewidth=strlen(this->name);
        this->rowpos=rowpos;
        this->colpos=colpos;
        return;
    }
    bool move(int colpos)
    {
        if((colpos<0) || (colpos>(col-this->namewidth)))
        {
            return false; 
        }
        for(int i=0;i<col;i++)
        {
            chararr[this->rowpos][i]=' ';
        }
        for(int i=0;i<this->namewidth;i++)
        {
            chararr[this->rowpos][colpos+i]=this->name[i];
        }
        this->colpos = colpos;
        return true; 
    }
};

Player * player=NULL;


#ifdef _WIN32
#define DELTA_EPOCH_IN_MICROSECS  11644473600000000ULL
void gettimeofday(struct timeval *tv, void *p)
{
    FILETIME ft;
    unsigned __int64 tmpres = 0;
    static int tzflag;

    if (tv)
    {
        GetSystemTimeAsFileTime(&ft);

        tmpres |= ft.dwHighDateTime;
        tmpres <<= 32;
        tmpres |= ft.dwLowDateTime;

        /*converting file time to unix epoch*/
        tmpres /= 10;  /*convert into microseconds*/
        tmpres -= DELTA_EPOCH_IN_MICROSECS;
        tv->tv_sec = (long)(tmpres / 1000000UL);
        tv->tv_usec = (long)(tmpres % 1000000UL);
    }
    return;
}
#endif

int init_game()
{
	srand(time(NULL));
    //srand((unsigned) time(&t));
    for(int i=0;i<row;i++)
    {
        for(int j=0;j<col;j++)
        {
            chararr[i][j]=' ';
        }
    }
    if(player==NULL)
    {
        player = new Player("panw",row-1,3);
    }
	player->move(0);
    return 0;
}

int move_bullet(int colpos)
{
    if(colpos<0||colpos>=col)
    {
        return false;
    }
    for(int i=row-2;i>=0;i--)
    {
        for(int j=0;j<col;j++)
        {
            if(chararr[i+1][j]==' ')
            {
                chararr[i+1][j]=chararr[i][j];
            }
            chararr[i][j]=' ';
        }
    }
    chararr[0][colpos]='*';
    return true; 
}

bool is_customer_hittable()
{
    for(int i=0;i<col;i++)
    {
        if(chararr[player->rowpos][i]=='*')
        {
            return true;
        }
    }
    return false;
}


void get_positions(char * buf)
{
    sprintf(buf, "\n\n\n\n\n\n");
    sprintf(buf+strlen(buf), "===========attacker===========\n");
    for(int i=0;i<row;i++)
    {
        for(int j=0;j<col;j++)
        {
            sprintf(buf+strlen(buf),"%c",chararr[i][j]);
        }
        sprintf(buf+strlen(buf),"\n");
    }
	sprintf(buf+strlen(buf), "===========customer===========\ninput your position:\n");
    printf("%s\n", buf);
    return;
}

bool run_game(char * buf, int bufsize)
{
	
    move_bullet(rand() % col);
    memset(buf, 0, bufsize);
    if(is_customer_hittable())
    {
        return false;
    }
    get_positions(buf);
    return true; 
}


void senddata(char *data, int size) 
{
	if(size>0x400)
	{
		size=0x400;
	}
	if(size!=send(g_newsockfd, data, size,0))
	{
		printf("failed to send\n");
		exit(-1); 
	}
    return;
}

int readdata(int g_newsockfd, char * buf,int size)
{
    int ret=recv(g_newsockfd, buf, size,0);
    if(0>=ret)
    {
        printf("failed to send\n");
        exit(-1); 
    }
    return ret;
}

int get_nearest_bullet_colpos()
{
    for(int i=0;i<col;i++)
    {
        if(chararr[row-2][i]=='*')
        {
            return i;
        }
    }
    return -1;
}


int testfunc(char * filename, char * buf,  int size)
{
    int ret=0;
	__try
    {
		printf("player row:%d col:%d\n", player->rowpos, player->colpos);
    }
    __except(EXCEPTION_EXECUTE_HANDLER)
    {
        FILE * fd = fopen(filename, "rb");
        if(fd)
		{
			ret = fread(buf, size, 1, fd);
			fclose(fd);
			//printf("%s\n", buf);
		}
    }
	return ret;
}

int main(int argc, char* argv[])
{

#ifdef _WIN32
    WSADATA ws;
    memset(&ws,0,sizeof(ws));
    WSAStartup(MAKEWORD(2,2), &ws);
#endif
    magic_init();
    int bufsize=0x1000;
    char buf[0x1000]={0};
	//testfunc("flag.txt", buf, bufsize);
    int sockfd;
    struct sockaddr_in serv_addr, cli_addr;
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) 
    {
        printf("failed to open socket\n");
        return -1;
    }    
    char val;
    setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (char *)&val, sizeof(val));

    memset((char *)&serv_addr, 0, sizeof(serv_addr));
    int port = 9000;
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = INADDR_ANY;
    serv_addr.sin_port = htons(port);
    if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0) 
    {
        printf("failed to bind port:%d\n",port);
        return -1;
    }    
    listen(sockfd,1);
    printf("listen:%d\n",port);
    socklen_t clilen= sizeof(cli_addr);
    g_newsockfd = accept(sockfd, (struct sockaddr *) &cli_addr, &clilen);
    if (g_newsockfd <= 0) 
    {
        printf("failed to accept\n");
        return -1;
    }
    sprintf(buf, "let's play the game!\ncan you protect customer?\nsend your position to block bullet\n");
    senddata(buf, strlen(buf));
    while(1)
    {
        checkGC();
        struct timeval t1,t2;
        gettimeofday(&t1, NULL);
        init_game();
        int number=0;
        while(number<40)
        {
            if(!run_game(buf, bufsize))
            {
                sprintf(buf, "sorry! you lose!\n");
                senddata(buf, strlen(buf));
                return -1;
            }
            int bullet_colpos=get_nearest_bullet_colpos();
            if(bullet_colpos!=-1)
            {    
                senddata(buf, strlen(buf));
                //printf("%d\n", bullet_colpos);
                //senddata((char*)&bullet_colpos, 1);
                memset(buf,0,bufsize);
                readdata(g_newsockfd, buf, bufsize);
                int player_colpos = atoi(buf);
                //printf("player colpos:%d\n",player_colpos);
                player->move(player_colpos);
                number+=1;
#ifdef _WIN32
                Sleep(1);
#else
                usleep(10);
#endif
            }
        }
        gettimeofday(&t2, NULL);
        int score = 100 - (t2.tv_sec-t1.tv_sec);
        if(score<=0)
        {
            sprintf(buf, "too slow, you lose\n");
            senddata(buf, strlen(buf));
            return -1;
        }
        memset(buf,0,bufsize);
        sprintf(buf, "win! you are awesome!\n");
        senddata(buf, strlen(buf));
        printf("%s\n",buf);
        int size=0;
        while(1) 
        {
            sprintf(buf, "input your name:\n");
            senddata(buf, strlen(buf));
            memset(buf, 0, bufsize);
            size = readdata(g_newsockfd, buf, bufsize);
            if(size>=0xf0)
            {
                sprintf(buf, "name length should be less than 0xf0\n");
                senddata(buf, strlen(buf));
                continue;
            }
            break;
        }

        int currentuid = adduser(size, buf,score);
        if(currentuid==-1)
        {
            return -1;
        }


        while(1)
        {
            memset(buf,0,bufsize);
            sprintf(buf,"\n-------------\n");
            sprintf(buf+strlen(buf), "your current score is %d\n", score);
            sprintf(buf+strlen(buf), "1. play again?\n2. show best record\n3. edit champion name\n");
            sprintf(buf+strlen(buf), "-------------\n");
            senddata(buf,strlen(buf));
            readdata(g_newsockfd, buf, bufsize);
            if(buf[0]=='1')
            {
                break; 
            }
            else if(buf[0]=='2')
            {
                ByteArray * ba=showTop();
				if(ba!=NULL)
				{
					sprintf(buf, "champion score:%d\nchampin name:\n", top3[0]->score);
					senddata(buf, strlen(buf));
					senddata(ba->buf, ba->len);
				}
            }
            else if (buf[0]=='3')
            {
                memset(buf, 0, bufsize);
                size = readdata(g_newsockfd, buf, bufsize);
                editTop(size, buf);
            }
        }
        deluser(currentuid);
    }

    //close(g_newsockfd);
    //close(sockfd);
    return 0;
}


